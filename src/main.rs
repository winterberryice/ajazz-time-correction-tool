use hidapi::{HidApi, HidDevice};
use std::error::Error;
use std::thread;
use std::time::Duration;

// --- Confirmed Constants ---
const TARGET_VID: u16 = 0x0c45;
const TARGET_PID: u16 = 0x8009;
const TARGET_INTERFACE: i32 = 3;

// --- Main Application Entry Point ---
fn main() {
    println!("Attempting full time-sync handshake with Ajazz keyboard...");
    if let Err(e) = run_app() {
        eprintln!("\nAn error occurred: {}", e);
    }
}

/// Finds the correct device interface and runs the full command sequence.
fn run_app() -> Result<(), Box<dyn Error>> {
    let api = HidApi::new()?;
    let device_info = api.device_list()
        .find(|d| d.vendor_id() == TARGET_VID && d.product_id() == TARGET_PID && d.interface_number() == TARGET_INTERFACE)
        .ok_or_else(|| "Target device interface not found.")?;

    println!("Found target device interface: {}", device_info.product_string().unwrap_or("Unknown"));
    let device = device_info.open_device(&api)?;

    // Perform the full 4-step handshake
    perform_full_handshake(&device)?;

    Ok(())
}

/// Sends a single command payload to the device.
fn send_command(device: &HidDevice, command_name: &str, data_fragment: &[u8]) -> Result<(), Box<dyn Error>> {
    println!("  - Sending Command: {}", command_name);

    // The hidapi buffer must be 1 byte larger than the data fragment for the Report ID.
    let mut buffer = vec![0x00; data_fragment.len() + 1];
    buffer[0] = 0x00; // Report ID 0, as confirmed by Wireshark's wValue=0x0300
    buffer[1..].copy_from_slice(data_fragment);

    device.send_feature_report(&buffer)?;
    Ok(())
}

/// Performs the full sequence of SET commands required to sync the time.
fn perform_full_handshake(device: &HidDevice) -> Result<(), Box<dyn Error>> {
    println!("Performing 4-step handshake...");
    let short_delay = Duration::from_millis(30);

    // --- Command 1: "Enter programming mode?" ---
    // Data Fragment from your capture: 04 18 00...
    let cmd1 = [
        0x04, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    send_command(device, "Handshake Step 1", &cmd1)?;
    thread::sleep(short_delay);

    // --- Command 2: "Prepare for time sync?" ---
    // Data Fragment from your capture: 04 28 00...
    let cmd2 = [
        0x04, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    send_command(device, "Handshake Step 2", &cmd2)?;
    thread::sleep(short_delay);

    // --- Command 3: The actual Time Sync command ---
    // Data Fragment from your capture: 00 01 5a...
    let cmd3 = [
        0x00, 0x01, 0x5A, 0x19, 0x06, 0x17, 0x10, 0x11, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // Note: Date/Time is from your capture, not dynamic
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA,
        0x55
    ];
    send_command(device, "Time Sync Data", &cmd3)?;
    thread::sleep(short_delay);

    // --- Command 4: "Exit programming mode?" ---
    // Data Fragment from your capture: 04 02 00...
    let cmd4 = [
        0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    send_command(device, "Handshake Step 4", &cmd4)?;

    println!("\nSUCCESS: The full 4-step handshake was sent to the keyboard!");
    println!("Please check if the keyboard's time changed.");

    Ok(())
}
